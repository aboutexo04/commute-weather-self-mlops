#!/bin/bash

# MLOps ÏãúÏä§ÌÖú Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏
# Usage: ./scripts/deploy.sh [dev|prod]

set -e

ENVIRONMENT=${1:-dev}
PROJECT_NAME="commute-weather-mlops"

echo "üöÄ Starting MLOps deployment for $ENVIRONMENT environment..."

# ÌôòÍ≤Ω Î≥ÄÏàò ÌååÏùº ÌôïÏù∏
if [ "$ENVIRONMENT" = "prod" ]; then
    ENV_FILE=".env.production"
    COMPOSE_FILE="docker-compose.production.yml"
else
    ENV_FILE=".env"
    COMPOSE_FILE="docker-compose.yml"
fi

if [ ! -f "$ENV_FILE" ]; then
    echo "‚ùå Environment file $ENV_FILE not found!"
    echo "Please create it from the template:"
    if [ "$ENVIRONMENT" = "prod" ]; then
        echo "cp .env.production .env"
    else
        echo "cp .env.example .env"
    fi
    exit 1
fi

echo "‚úÖ Using environment file: $ENV_FILE"
echo "‚úÖ Using compose file: $COMPOSE_FILE"

# DockerÏôÄ Docker Compose ÌôïÏù∏
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed!"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose is not installed!"
    exit 1
fi

# Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
read -p "ü§î Stop and remove existing containers? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üõë Stopping existing containers..."
    docker-compose -f $COMPOSE_FILE down --remove-orphans

    echo "üßπ Cleaning up unused Docker resources..."
    docker system prune -f
fi

# ÌïÑÏöîÌïú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
echo "üìÅ Creating necessary directories..."
mkdir -p logs data ssl monitoring/grafana/dashboards monitoring/grafana/datasources

# Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
echo "üî® Building Docker images..."
if [ "$ENVIRONMENT" = "prod" ]; then
    docker-compose -f $COMPOSE_FILE build --no-cache
else
    docker-compose -f $COMPOSE_FILE build
fi

# ÏÑúÎπÑÏä§ ÏãúÏûë
echo "üöÄ Starting services..."
docker-compose -f $COMPOSE_FILE up -d

# ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
echo "‚è≥ Waiting for services to start..."
sleep 30

echo "üîç Checking service health..."
docker-compose -f $COMPOSE_FILE ps

# Ìó¨Ïä§ Ï≤¥ÌÅ¨
echo "üè• Running health checks..."
max_attempts=10
attempt=1

while [ $attempt -le $max_attempts ]; do
    echo "Attempt $attempt/$max_attempts: Checking main application..."

    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        echo "‚úÖ Main application is healthy!"
        break
    else
        if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå Health check failed after $max_attempts attempts"
            echo "üìã Container logs:"
            docker-compose -f $COMPOSE_FILE logs --tail=50 mlops-app
            exit 1
        fi
        echo "‚è≥ Waiting 10 seconds before retry..."
        sleep 10
        ((attempt++))
    fi
done

# MLflow ÏÑúÎπÑÏä§ ÌôïÏù∏ (productionÏóêÏÑúÎßå)
if [ "$ENVIRONMENT" = "prod" ]; then
    echo "üîç Checking MLflow server..."
    if curl -f http://localhost:5001 > /dev/null 2>&1; then
        echo "‚úÖ MLflow server is running!"
    else
        echo "‚ö†Ô∏è MLflow server might not be ready yet"
    fi
fi

echo ""
echo "üéâ Deployment completed successfully!"
echo ""
echo "üìä Service URLs:"
echo "   Main Application: http://localhost:8000"
if [ "$ENVIRONMENT" = "prod" ]; then
    echo "   MLflow Server:    http://localhost:5001"
    echo "   Grafana:          http://localhost:3000"
    echo "   Prometheus:       http://localhost:9090"
fi
echo ""
echo "üìã Useful commands:"
echo "   View logs:        docker-compose -f $COMPOSE_FILE logs -f"
echo "   Stop services:    docker-compose -f $COMPOSE_FILE down"
echo "   Restart:          docker-compose -f $COMPOSE_FILE restart"
echo "   Check status:     docker-compose -f $COMPOSE_FILE ps"
echo ""

if [ "$ENVIRONMENT" = "prod" ]; then
    echo "üîí Production deployment notes:"
    echo "   - Make sure to configure SSL certificates in ./ssl/"
    echo "   - Update nginx.conf with your actual domain"
    echo "   - Set up proper firewall rules"
    echo "   - Configure log rotation"
    echo "   - Set up monitoring alerts"
fi

echo "üéØ Happy MLOps! Your weather prediction system is now running!"